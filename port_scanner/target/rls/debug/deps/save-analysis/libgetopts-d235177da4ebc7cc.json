{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.0","prelude":{"crate_id":{"name":"getopts","disambiguator":[3752998654219285024,2898791510312675560]},"crate_root":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src","external_crates":[{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16513936499588997349,16134942572555975612]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13884716991014357436,2644260543213338296]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9374310136931272928,12949111515407090458]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[5232539925847202194,9774558029827763602]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[15393416963150925180,16305274835046792268]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9231565656694328604,8087676556479224843]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9903928342028307069,4105462544152849202]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[16306635266868852426,18389195590484691657]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[12288281695468434670,16442687737287381902]}},{"file_name":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","num":10,"id":{"name":"unicode_width","disambiguator":[6411970967591901861,9215148746163554027]}}],"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":509,"byte_end":70302,"line_start":13,"line_end":2099,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":509,"byte_end":70302,"line_start":13,"line_end":2099,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/Alexander/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.18/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":70},{"krate":0,"index":126},{"krate":0,"index":138},{"krate":0,"index":136},{"krate":0,"index":132},{"krate":0,"index":128},{"krate":0,"index":142},{"krate":0,"index":154},{"krate":0,"index":148},{"krate":0,"index":144},{"krate":0,"index":158},{"krate":0,"index":170},{"krate":0,"index":168},{"krate":0,"index":164},{"krate":0,"index":160},{"krate":0,"index":174},{"krate":0,"index":186},{"krate":0,"index":184},{"krate":0,"index":180},{"krate":0,"index":176},{"krate":0,"index":190},{"krate":0,"index":202},{"krate":0,"index":196},{"krate":0,"index":192},{"krate":0,"index":206},{"krate":0,"index":218},{"krate":0,"index":212},{"krate":0,"index":208},{"krate":0,"index":222},{"krate":0,"index":234},{"krate":0,"index":228},{"krate":0,"index":224},{"krate":0,"index":238},{"krate":0,"index":250},{"krate":0,"index":244},{"krate":0,"index":240},{"krate":0,"index":254},{"krate":0,"index":270},{"krate":0,"index":266},{"krate":0,"index":260},{"krate":0,"index":256},{"krate":0,"index":72},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":124}],"decl_id":null,"docs":" Simple getopt alternative.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3407,"byte_end":3429,"line_start":98,"line_end":98,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4121,"byte_end":4128,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"name":"Options","qualname":"::Options","value":"Options {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23}],"decl_id":null,"docs":" A description of the options that a program can handle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4278,"byte_end":4281,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"new","qualname":"<Options>::new","value":"fn () -> Options","parent":null,"children":[],"decl_id":null,"docs":" Create a blank set of options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4489,"byte_end":4502,"line_start":143,"line_end":143,"column_start":12,"column_end":25},"name":"parsing_style","qualname":"<Options>::parsing_style","value":"fn (&mut self, style: ParsingStyle) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Set the parsing style.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5065,"byte_end":5074,"line_start":156,"line_end":156,"column_start":12,"column_end":21},"name":"long_only","qualname":"<Options>::long_only","value":"fn (&mut self, long_only: bool) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Set or clear \"long options only\" mode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5262,"byte_end":5265,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"opt","qualname":"<Options>::opt","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str, hasarg: HasArg, occur: Occur) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a generic option group, stating all parameters explicitly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6031,"byte_end":6038,"line_start":181,"line_end":181,"column_start":12,"column_end":19},"name":"optflag","qualname":"<Options>::optflag","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is optional and does not take an argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6784,"byte_end":6796,"line_start":201,"line_end":201,"column_start":12,"column_end":24},"name":"optflagmulti","qualname":"<Options>::optflagmulti","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that can occur more than once and does not\n take an argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7652,"byte_end":7662,"line_start":222,"line_end":222,"column_start":12,"column_end":22},"name":"optflagopt","qualname":"<Options>::optflagopt","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is optional and takes an optional argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8562,"byte_end":8570,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"optmulti","qualname":"<Options>::optmulti","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is optional, takes an argument, and may occur\n multiple times.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9428,"byte_end":9434,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"name":"optopt","qualname":"<Options>::optopt","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is optional and takes an argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10293,"byte_end":10299,"line_start":286,"line_end":286,"column_start":12,"column_end":18},"name":"reqopt","qualname":"<Options>::reqopt","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is required and takes an argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11103,"byte_end":11108,"line_start":308,"line_end":308,"column_start":12,"column_end":17},"name":"parse","qualname":"<Options>::parse","value":"fn <C> (&self, args: C) -> Result","parent":null,"children":[],"decl_id":null,"docs":" Parse command line arguments according to the provided options.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16870,"byte_end":16881,"line_start":443,"line_end":443,"column_start":12,"column_end":23},"name":"short_usage","qualname":"<Options>::short_usage","value":"fn (&self, program_name: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Derive a short one-line usage summary from a set of long options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17251,"byte_end":17256,"line_start":454,"line_end":454,"column_start":12,"column_end":17},"name":"usage","qualname":"<Options>::usage","value":"fn (&self, brief: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Derive a formatted message from a set of options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17572,"byte_end":17589,"line_start":461,"line_end":461,"column_start":12,"column_end":29},"name":"usage_with_format","qualname":"<Options>::usage_with_format","value":"fn <F> (&self, mut formatter: F) -> String","parent":null,"children":[],"decl_id":null,"docs":" Derive a custom formatted message from a set of options. The formatted options provided to\n a closure as an iterator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":67},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20768,"byte_end":20781,"line_start":560,"line_end":560,"column_start":5,"column_end":18},"name":"FloatingFrees","qualname":"::ParsingStyle::FloatingFrees","value":"ParsingStyle::FloatingFrees","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Flags and \"free\" arguments can be freely inter-mixed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":69},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20915,"byte_end":20930,"line_start":563,"line_end":563,"column_start":5,"column_end":20},"name":"StopAtFirstFree","qualname":"::ParsingStyle::StopAtFirstFree","value":"ParsingStyle::StopAtFirstFree","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" As soon as a \"free\" argument (i.e. non-flag) is encountered, stop\n considering any remaining arguments as flags.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":126},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20687,"byte_end":20699,"line_start":558,"line_end":558,"column_start":10,"column_end":22},"name":"ParsingStyle","qualname":"::ParsingStyle","value":"ParsingStyle::{FloatingFrees, StopAtFirstFree}","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69}],"decl_id":null,"docs":" What parsing style to use when parsing arguments.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20678,"byte_end":20932,"line_start":558,"line_end":564,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20678,"byte_end":20932,"line_start":558,"line_end":564,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":79},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21391,"byte_end":21394,"line_start":581,"line_end":581,"column_start":5,"column_end":8},"name":"Yes","qualname":"::HasArg::Yes","value":"HasArg::Yes","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The option requires an argument.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":81},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21438,"byte_end":21440,"line_start":583,"line_end":583,"column_start":5,"column_end":7},"name":"No","qualname":"::HasArg::No","value":"HasArg::No","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The option takes no argument.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":83},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21487,"byte_end":21492,"line_start":585,"line_end":585,"column_start":5,"column_end":10},"name":"Maybe","qualname":"::HasArg::Maybe","value":"HasArg::Maybe","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The option argument is optional.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":158},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21337,"byte_end":21343,"line_start":579,"line_end":579,"column_start":10,"column_end":16},"name":"HasArg","qualname":"::HasArg","value":"HasArg::{Yes, No, Maybe}","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83}],"decl_id":null,"docs":" Describes whether an option has an argument.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21328,"byte_end":21495,"line_start":579,"line_end":586,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21328,"byte_end":21495,"line_start":579,"line_end":586,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":85},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21633,"byte_end":21636,"line_start":592,"line_end":592,"column_start":5,"column_end":8},"name":"Req","qualname":"::Occur::Req","value":"Occur::Req","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The option occurs once.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":87},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21682,"byte_end":21690,"line_start":594,"line_end":594,"column_start":5,"column_end":13},"name":"Optional","qualname":"::Occur::Optional","value":"Occur::Optional","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The option occurs at most once.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":89},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21742,"byte_end":21747,"line_start":596,"line_end":596,"column_start":5,"column_end":10},"name":"Multi","qualname":"::Occur::Multi","value":"Occur::Multi","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The option occurs zero or more times.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21589,"byte_end":21594,"line_start":590,"line_end":590,"column_start":10,"column_end":15},"name":"Occur","qualname":"::Occur","value":"Occur::{Req, Optional, Multi}","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89}],"decl_id":null,"docs":" Describes how often an option may occur.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21580,"byte_end":21750,"line_start":590,"line_end":597,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21580,"byte_end":21750,"line_start":590,"line_end":597,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":238},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22926,"byte_end":22933,"line_start":640,"line_end":640,"column_start":12,"column_end":19},"name":"Matches","qualname":"::Matches","value":"Matches { free }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121}],"decl_id":null,"docs":" The result of checking command line arguments. Contains a vector\n of matches and a vector of free strings.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22915,"byte_end":23114,"line_start":640,"line_end":647,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":121},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23094,"byte_end":23098,"line_start":646,"line_end":646,"column_start":9,"column_end":13},"name":"free","qualname":"::Matches::free","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Free string fragments\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":123},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23392,"byte_end":23407,"line_start":655,"line_end":655,"column_start":5,"column_end":20},"name":"ArgumentMissing","qualname":"::Fail::ArgumentMissing","value":"Fail::ArgumentMissing(String)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" The option requires an argument but none was passed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":127},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23491,"byte_end":23509,"line_start":657,"line_end":657,"column_start":5,"column_end":23},"name":"UnrecognizedOption","qualname":"::Fail::UnrecognizedOption","value":"Fail::UnrecognizedOption(String)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" The passed option is not declared among the possible options.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":131},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23565,"byte_end":23578,"line_start":659,"line_end":659,"column_start":5,"column_end":18},"name":"OptionMissing","qualname":"::Fail::OptionMissing","value":"Fail::OptionMissing(String)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" A required option is not present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":135},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23657,"byte_end":23673,"line_start":661,"line_end":661,"column_start":5,"column_end":21},"name":"OptionDuplicated","qualname":"::Fail::OptionDuplicated","value":"Fail::OptionDuplicated(String)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" A single occurrence option is being used multiple times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":139},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23754,"byte_end":23772,"line_start":663,"line_end":663,"column_start":5,"column_end":23},"name":"UnexpectedArgument","qualname":"::Fail::UnexpectedArgument","value":"Fail::UnexpectedArgument(String)","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" There's an argument being passed to a non-argument option.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":254},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23320,"byte_end":23324,"line_start":653,"line_end":653,"column_start":10,"column_end":14},"name":"Fail","qualname":"::Fail","value":"Fail::{ArgumentMissing, UnrecognizedOption, OptionMissing, OptionDuplicated, UnexpectedArgument}","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":127},{"krate":0,"index":131},{"krate":0,"index":135},{"krate":0,"index":139}],"decl_id":null,"docs":" The type returned when the command line does not conform to the\n expected format. Use the `Debug` implementation to output detailed\n information.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23311,"byte_end":23783,"line_start":653,"line_end":664,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24237,"byte_end":24243,"line_start":679,"line_end":679,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<Matches, Fail>","parent":null,"children":[],"decl_id":null,"docs":" The result of parsing a command line with a set of options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26371,"byte_end":26382,"line_start":754,"line_end":754,"column_start":12,"column_end":23},"name":"opt_defined","qualname":"<Matches>::opt_defined","value":"fn (&self, nm: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if an option was defined\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26535,"byte_end":26546,"line_start":759,"line_end":759,"column_start":12,"column_end":23},"name":"opt_present","qualname":"<Matches>::opt_present","value":"fn (&self, nm: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if an option was matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26689,"byte_end":26698,"line_start":764,"line_end":764,"column_start":12,"column_end":21},"name":"opt_count","qualname":"<Matches>::opt_count","value":"fn (&self, nm: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of times an option was matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26838,"byte_end":26850,"line_start":769,"line_end":769,"column_start":12,"column_end":24},"name":"opts_present","qualname":"<Matches>::opts_present","value":"fn (&self, names: &[String]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any of several options were matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27206,"byte_end":27214,"line_start":779,"line_end":779,"column_start":12,"column_end":20},"name":"opts_str","qualname":"<Matches>::opts_str","value":"fn (&self, names: &[String]) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the string argument supplied to one of several matching options or `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27611,"byte_end":27619,"line_start":792,"line_end":792,"column_start":12,"column_end":20},"name":"opt_strs","qualname":"<Matches>::opt_strs","value":"fn (&self, nm: &str) -> Vec<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of the arguments provided to all matches of the given\n option.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27923,"byte_end":27930,"line_start":802,"line_end":802,"column_start":12,"column_end":19},"name":"opt_str","qualname":"<Matches>::opt_str","value":"fn (&self, nm: &str) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the string argument supplied to a matching option or `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28362,"byte_end":28373,"line_start":815,"line_end":815,"column_start":12,"column_end":23},"name":"opt_default","qualname":"<Matches>::opt_default","value":"fn (&self, nm: &str, def: &str) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matching string, a default, or `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28722,"byte_end":28729,"line_start":826,"line_end":826,"column_start":12,"column_end":19},"name":"opt_get","qualname":"<Matches>::opt_get","value":"fn <T> (&self, nm: &str) -> result::Result<Option<T>, T::Err>","parent":null,"children":[],"decl_id":null,"docs":" Returns some matching value or `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29264,"byte_end":29279,"line_start":841,"line_end":841,"column_start":12,"column_end":27},"name":"opt_get_default","qualname":"<Matches>::opt_get_default","value":"fn <T> (&self, nm: &str, def: T) -> result::Result<T, T::Err>","parent":null,"children":[],"decl_id":null,"docs":" Returns a matching value or default.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4218,"byte_end":4225,"line_start":132,"line_end":132,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23800,"byte_end":23804,"line_start":666,"line_end":666,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24283,"byte_end":24287,"line_start":681,"line_end":681,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24628,"byte_end":24636,"line_start":698,"line_end":698,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25972,"byte_end":25979,"line_start":742,"line_end":742,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30075,"byte_end":30079,"line_start":873,"line_end":873,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4218,"byte_end":4225,"line_start":132,"line_end":132,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23800,"byte_end":23804,"line_start":666,"line_end":666,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":254},"to":{"krate":1,"index":2338}},{"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24283,"byte_end":24287,"line_start":681,"line_end":681,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24628,"byte_end":24636,"line_start":698,"line_end":698,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25972,"byte_end":25979,"line_start":742,"line_end":742,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,65,108,101,120,97,110,100,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,101,116,111,112,116,115,45,48,46,50,46,49,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30075,"byte_end":30079,"line_start":873,"line_end":873,"column_start":23,"column_end":27},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":254},"to":{"krate":2,"index":7858}}]}