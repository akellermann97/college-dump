   1 0000               # File:		add_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		Alexander Kellermann Nieves  (akn1736)
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	Add two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the addition, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	add_ascii_numbers
  29 0000               
  30 0000               add_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028               
  49 0000                       .data 
  50 0000                       .align 0
  51 0000               testing:
  52 0000 00000009	        .word 9                 # set up a data segment for testing
  53 0004 00000017	        .word 23
  54 0008 00000022	        .word 34
  55 000c 00000031	        .word 49
  56 0010               
  57 0010               wordz:
  58 0010 37      	        .ascii "7"
  59 0011               
  60 0028                       .text
  61 0028                       .align 2
  62 0028               
  63 0028               else:
  64 0028               
  65 0028               # I want to test the program by writing nonsense results to the result. But I
  66 0028               # can't seem to get the result to change. This makes debugging the program
  67 0028               # difficult. 
  68 0028               
  69 0028 8C900000	        lw      $s0, 0($a0)     # This stores the first string
  70 002c 8C910004	        lw      $s1, 4($a0)     # This stores the second string
  71 0030 8C920008	        lw      $s2, 8($a0)     # This stores the addr of where 2 put result.
  72 0034 8C93000C	        lw      $s3, 12($a0)    # Length of the string
  73 0038 8C940010	        lw      $s4, 16($a0)    # Result (This is only a string)
  74 003c               
  75 003c 3C150000	        la      $s5, wordz
     0040 36B50000
  76 0044 8EB60000	        lw      $s6, 0($s5)     # s6 should now contain ascii 7
  77 0048               
  78 0048 AC950010	        sw      $s5, 16($a0)
  79 004c               
  80 004c 34080000	        li      $t0, 0          # This will be the counter for the loop
  81 0050               
  82 0050               addloop:
  83 0050 11130002	        beq     $t0, $s3, endLoop       # When t0==s3, exit
  84 0054 21080001	        addi    $t0, $t0, 1
  85 0058               
  86 0058 08000014	        j       addloop
  87 005c                       
  88 005c               
  89 005c               
  90 005c               endLoop:
  91 005c                       
  92 005c                       
  93 005c               ## Attempting to write to the word block
  94 005c               
  95 005c               
  96 005c               # ###### END STUDENT CODE BLOCK 1 ######
  97 005c               
  98 005c               #
  99 005c               # Restore registers ra and s0 - s7 from the stack.
 100 005c               #
 101 005c 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
 102 0060 8FB7001C		lw 	$s7, 28($sp)
 103 0064 8FB60018		lw 	$s6, 24($sp)
 104 0068 8FB50014		lw 	$s5, 20($sp)
 105 006c 8FB40010		lw 	$s4, 16($sp)
 106 0070 8FB3000C		lw 	$s3, 12($sp)
 107 0074 8FB20008		lw 	$s2, 8($sp)
 108 0078 8FB10004		lw 	$s1, 4($sp)
 109 007c 8FB00000		lw 	$s0, 0($sp)
 110 0080 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
 111 0084               
 112 0084 03E00008		jr	$ra			# Return to the caller.


A_FRAMESIZE        = 00000028   
add_ascii_numbers    00000000 RG text 
addloop              00000050 R  text 
else                 00000028 R  text 
endLoop              0000005C R  text 
testing              00000000 R  data 
wordz                00000010 R  data 
